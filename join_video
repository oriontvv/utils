#!/usr/bin/env python

import os
import argparse
import logging

logging.basicConfig()
log = logging.getLogger(__name__)
log.setLevel(logging.INFO)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--input_path', required=True,
        help='path to input videos for join')
    parser.add_argument('--output_path', required=True,
        help='path for output filename')

    return parser.parse_args()


def join_video(files, input_path, output_path):

    for fname in files:
        in_file = os.path.join(input_path, fname)
        cmd = 'ffmpeg -i {in_file} -c copy -bsf:v h264_mp4toannexb -f mpegts {out_temp_file}'.format(
            in_file=in_file, out_temp_file=in_file + '.ts')
        log.info(cmd)
        os.system(cmd)

    input_files = '|'.join(os.path.join(input_path, fname) + '.ts'
                           for fname in files)
    cmd = 'ffmpeg -i "concat:{input_files}" -c copy {output_path}'.format(
        input_files=input_files, output_path=output_path)
    log.info(cmd)
    os.system(cmd)

    # remove temp files
    for fname in files:
        temp_file = os.path.join(input_path, fname) + '.ts'
        if os.path.exists(temp_file):
            os.system('rm {temp_file}'.format(temp_file=temp_file))


def main():
    args = parse_args()
    input_path = args.input_path
    output_path = args.output_path

    if not os.path.exists(input_path):
        log.error('Input path {} not found'.format(input_path))
        return

    if os.path.exists(output_path):
        log.error('Output path {} already exists'.format(output_path))
        # return

    dirname = os.path.abspath(os.path.dirname(output_path))
    if not os.path.exists(dirname):
        cmd = 'mkdir -p {}'.format(dirname)
        os.system(cmd)

    files = sorted(fname for fname in os.listdir(input_path) 
             if fname.lower().endswith(('.mp4', '.avi', '.mpg', '.mpeg')))

    log.info('Joining {} files from {} > {}'.format(len(files), input_path, output_path))

    join_video(files, input_path, output_path)


if __name__ == '__main__':
    main()
